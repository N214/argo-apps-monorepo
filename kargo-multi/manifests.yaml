---
# Source: kargo-multi/charts/nginx/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: kargo-multi-nginx
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.27.3
    helm.sh/chart: nginx-18.3.2
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: kargo-multi
      app.kubernetes.io/name: nginx
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: kargo-multi/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: kargo-multi-redis
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: kargo-multi
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: kargo-multi/charts/nginx/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kargo-multi-nginx
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.27.3
    helm.sh/chart: nginx-18.3.2
automountServiceAccountToken: false
---
# Source: kargo-multi/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: kargo-multi-redis-master
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
---
# Source: kargo-multi/charts/redis/templates/replicas/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: kargo-multi-redis-replica
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
---
# Source: kargo-multi/charts/nginx/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kargo-multi-nginx-tls
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.27.3
    helm.sh/chart: nginx-18.3.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyVENDQXBXZ0F3SUJBZ0lSQUtJS3VVb3pGTGxvWGR5YnpnNGhsazR3RFFZSktvWklodmNOQVFFTEJRQXcKRXpFUk1BOEdBMVVFQXhNSWJtZHBibmd0WTJFd0hoY05NalV3TVRBek1Ua3dPREEwV2hjTk1qWXdNVEF6TVRrdwpPREEwV2pBY01Sb3dHQVlEVlFRREV4RnJZWEpuYnkxdGRXeDBhUzF1WjJsdWVEQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFObCttQW5OM0dDcnIrUDFDdU93UkJwRndIemhzcUoxcVBFbGlhOHYKenM1c01FMG5LSEJGb3RmWlJ0QTlyY2lqSFFZVTBCRGtYOTI1VkYyNzcvSDhEZnRLWUlxekJaTURmNytvcHorbApkVmNhQVdqWlp0TWNET01xdG9EVXZJY2NrZ2hPSUR1SlRpWEd1dm1rWkNkRitPc1FzYVR4STdQcHlMZkd2RENsCjJYVWZDb0FBOS9aYzdtQlhBa0s0QzBIVFUzODkrSkl2d2s0UHBhZzdCSE83QVk2d0ViTitoUFExL3phV1lHVnYKb2hLL1JDcmV2KzZWdGxBc2JBWk5VZTVQSkxjUnYrYlRaYWU1WkU5Y2ZSYmg1RGViTTU0aGdkazdxaTJDSHUzSwo5cEJRSjZHZ1paejBkaVVxQWtKYVhsZGh4UjFNZzNYUWZRaGlFT1ltNlZNOEVuOENBd0VBQWFPQjhqQ0I3ekFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVRUUJlZTQxSVdzNjBjdzJZV2MxMXRqOXo2MUV3Z1k0RwpBMVVkRVFTQmhqQ0JnNElSYTJGeVoyOHRiWFZzZEdrdGJtZHBibmlDSEd0aGNtZHZMVzExYkhScExXNW5hVzU0CkxtdGhjbWR2TFdSbGJXK0NJR3RoY21kdkxXMTFiSFJwTFc1bmFXNTRMbXRoY21kdkxXUmxiVzh1YzNaamdpNXIKWVhKbmJ5MXRkV3gwYVMxdVoybHVlQzVyWVhKbmJ5MWtaVzF2TG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUEwRwpDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnpaL3ZGd0RSZ2NEVWZ0OEJnTU9TN0JuR01IcEVXbzdzTDZidXFPYnlYCnROWGx5aDRaa3p1enlzMENZVlZVaE9tSUhvbGNwaWt2Mzh2N29zZ2loRnBQb0twajR1OFhXZHhqK1NiTnpLNXQKaVhrMTNIdlRkYzNRTytxcVNUcEZweXJDZGEzQTk3dHp1RTUxVm1XOUtzVk04cWRpMmlIa0F0SFptRW1vWitMTQppNjJSQmVkZ0s1eDVyQ3hmNnN5U0FjR1YwbHdoTFE3dldSU0NCRkdjTHZGemw5QnlHK2tpcnFobWJ5Q0ViRnU2CnFBRFh1Q3FNWG5pUFA2ZlRPbVdCUE1SM21EQlkwRFNmWGRobVZhNzJxWVlNZXU3N3lCc3hIcXJTN1B6a2FmenkKcitJZW93Wm11WFYwT0VYNVV3RzR1R00xNTZtOFlkVEZDNUx3Q2dCRUtxMlIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMlg2WUNjM2NZS3V2NC9VSzQ3QkVHa1hBZk9HeW9uV284U1dKcnkvT3ptd3dUU2NvCmNFV2kxOWxHMEQydHlLTWRCaFRRRU9SZjNibFVYYnZ2OGZ3TiswcGdpck1Ga3dOL3Y2aW5QNlYxVnhvQmFObG0KMHh3TTR5cTJnTlM4aHh5U0NFNGdPNGxPSmNhNithUmtKMFg0NnhDeHBQRWpzK25JdDhhOE1LWFpkUjhLZ0FEMwo5bHp1WUZjQ1FyZ0xRZE5UZnozNGtpL0NUZytscURzRWM3c0JqckFSczM2RTlEWC9OcFpnWlcraUVyOUVLdDYvCjdwVzJVQ3hzQmsxUjdrOGt0eEcvNXRObHA3bGtUMXg5RnVIa041c3puaUdCMlR1cUxZSWU3Y3Iya0ZBbm9hQmwKblBSMkpTb0NRbHBlVjJIRkhVeURkZEI5Q0dJUTVpYnBVendTZndJREFRQUJBb0lCQVFDU0Z5T2U2a1ZPTmVTVwp0VUVVUVpEdEtNOHIweHAvWDVNVUw4ZTFBZUxpNnU3aTFCdW9sazNVdU9DRS9ma2VYTm9nL0pmcDBNeklEVFdyCkpKTCtzdlRkUjA5anV1NVNtcllUa2dDTmt1RW5tWk02ejFUdkZ0ZGRPNUtOSk5oaDFRSU9UQlFBaWJFUlZOVEEKM1BoZEhQWWZSdjVjTVpGdXh1a0k4SmYyQVdENDlweVRJNDVMYWYrWlZzNmx6d0ZJTHJXNG1NSGZubld4U1BsQQpuZDdLQ2c0blZhRVBoRFpTQm1uWXNPNE9mN3QyYURESFFycFFhZjk1UXB4TFNQOUZxSElRWW02c2hxT09mNGZmCjZlSVl2bXpuQ2RXekt4ZVZiTFdjOVlDTUdGd1djRzJEQzdYNGhuOFY5UndoWHp0a054ZWZSWnBnc1JVck10L2sKYjFkem9FK1pBb0dCQU9RQk8rblRaQTIxR041bEI1Z25pQWdHVnd2aFB3UzdtcGhiYzg2cjVUaVFMbyt2eXhpeApkU1JwbnJVbnBGSXNwNWc4ajBYVmY0b1FIMHJva0NrWVBWQkZRbEpXNEQ3bWhvMElvRThKUHBrZDNxUUcwRk5kCitRMDgrVmZlYjFxeW91eHVvUDNXNUd6SWJYRmp0R3cwVnVCa1UzOThPSUlPUk4rbzdEMS93QXBOQW9HQkFQUXkKL29hL2tWY05HaDZhOHFiVVpKcWhPcWJ0YURSZ1kzYUpzeHdUdUtNZk9ZRkpaQi85aGNEaTkrdWlCS1Arbkx1YgpTdWNXNm1naFE1ZmVEQUJsMjNJZjNrazNYS1h2MDNYVXJjM2M0T0xxTW5oRDlkV281MVFSazZaQjg5SDZ2VFRhCkVyQnNsd093aVJObVIySUZ6Nzd6Q2NvSXpGeE5VSmFmaUEwNUJGMzdBb0dBQ1pFN3NGNGNicTdRc2xSTzgwV0YKWWNEU1dqOURZN0Z6bFQwUktQVHhrMlFKY0NJU1JhRDhwMkIvTmw3SmVHRkRUeElMZVFTeWExcXQxWGpZdzhDdQpvZldtQ01wNGNtczk3aUVVaVB4OFVmUjg2U2tZQ01lQ3NkbURKUHJDZFczVmhGSklFeDYzU3hGRjltSVdxZ3V3Ck1ZNUVLcTlOdDdkZGtIMElITFNGbkdrQ2dZQThseTZLTnB3VVVsN3B1eDU4QUhVWjNPbFZvOUJZTnBaWFFpRmIKMVJUWi9KUmpITmVvREZxVW1ueFRUZmNDemRrTHY2TmRKVlZ5RXRiWHByT3BvWnhLZTlmR3FPTG5GVk9OaUFDNwo5Sk1rR21IOWJ6ZGZGVEtZckdmTE45QU1pTDlManRSV1RBdElVaFFnNlI3TEZwQU9XL1ZRMk5BRUV2YnMrSlprCldZSlk0d0tCZ0EzOEZXa1dlSTh2RzJrMkNQbEtrYzBiWHR2UnNmMnUrM1hXN05qb3JkckJXdStzUC9Nc2F6WGkKeGlzOFNPNnlEZi9PemFhd1FnZkJaSjUzTHJXWksxM3NGK0ZzQStGTTBySllMRmh6M3ZBNHc1NUJnenVBUllQNgppNkUzYVpEV2gwZWZOenhwbFNLV0hqcEVIbUEyaGVPWVdSVVBmdGJleHRXMWxWTUE3eVUzCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lSQU9pVFRHSmdxV2cwRnNQQnl4K1E4Z3N3RFFZSktvWklodmNOQVFFTEJRQXcKRXpFUk1BOEdBMVVFQXhNSWJtZHBibmd0WTJFd0hoY05NalV3TVRBek1Ua3dPREEwV2hjTk1qWXdNVEF6TVRrdwpPREEwV2pBVE1SRXdEd1lEVlFRREV3aHVaMmx1ZUMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFPdVg0bm1KeDNQTzBoamFaRS84aW5YYUFFUWptT05xTWJlNStqSTl0bUVVRTdxNTFKSWIKYWVjSXcyRHgwSkZEOGZFckthUzlOZWcrc2hPTXJZSGljRmxQUTJXSWVnb0tFN3VxYWRibjJ4cnZRSTBqTVVxUgorNG1KWFpUcHdMdCttdDFpUTg2SzRiK2hDZmVQd243UkpaNmNkVlVLUndhYkxPQzFoenBRSll1MW45WFhScmgzCjJSamVwYTZvdkFZYUo5cjJsbkU1K0VWMTQvUHA4OElLK3ZPOXZESTVoRzNCNis0dk9Wcnd5VTNUQXFvNHJLc08KVnF5Z0JQaW9PQUgwdC9hRkwyaUR0UUhFUm03ZFR4NGtCdWhJZ2ordUUrbkt3NXZEWVcyekxVUXZmZVQrVUtlWgp1R0M1R0Jjb05WczB2MzJXNVdSM0RMY2xEQ1F2ZEdaYnhURUNBd0VBQWFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFECkFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01CMEdBMVVkRGdRV0JCUkJBRjU3alVoYXpyUnpEWmhaelhXMlAzUHJVVEFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQWJpN05aYjN0QnJ0UG5PajVZZVY0ZWhiM0V0ZmhoRTdKRWQ2a2hCTnA3Q2NSVFpNR083NlVjQ0x2CmRSQUVRbjJlckc4cEs3UE55RlBzUzNaaTFWbTFJNVdLdk1jV0p4RTRHV1dIdjlsQ1NkWkpCYk5uaE15Yjd6bnYKUnRocHE4SUxQRG03Nk1FUzJCNHVrRnlROE0vWlhVRE83NFRndDNDd1FMSjFuKzFoMjVuYVNvMnhSdU9jdi92MApqb0sxNmZZaG9ONTlqV2ZSVnBEVStGczZONkp4QXN3UTRZRFJBcmJNeVBIMmcrdm5CQnM1L0lUN2xHL1FqakY5CjMrT1pVdFRacGxKODIxQWJuOGtkUUJDbXdyS25SUjVoNVE0MktyYllMY1d3b2tXb2xROTdBM0hyQzNpanBLc2sKek93TXNHUjBacXdnTTZ3VHNmTWRWYnUwOFlhVHBBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: kargo-multi/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kargo-multi-redis
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
type: Opaque
data:
  redis-password: "NjBjeWNkT1oyUA=="
---
# Source: kargo-multi/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-multi-redis-configuration
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: kargo-multi/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-multi-redis-health
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: kargo-multi/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-multi-redis-scripts
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="kargo-multi-redis-headless.kargo-demo.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: kargo-multi/charts/nginx/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kargo-multi-nginx
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.27.3
    helm.sh/chart: nginx-18.3.2
  annotations:
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/name: nginx
---
# Source: kargo-multi/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kargo-multi-redis-headless
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/name: redis
---
# Source: kargo-multi/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kargo-multi-redis-master
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: kargo-multi/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kargo-multi-redis-replicas
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: kargo-multi/charts/nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kargo-multi-nginx
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.27.3
    helm.sh/chart: nginx-18.3.2
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kargo-multi
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kargo-multi
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx
        app.kubernetes.io/version: 1.27.3
        helm.sh/chart: nginx-18.3.2
      annotations:
    spec:
      
      shareProcessNamespace: false
      serviceAccountName: kargo-multi-nginx
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kargo-multi
                    app.kubernetes.io/name: nginx
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      hostIPC: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/nginx:1.27.3-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/nginx/logs; then
                cp -r /opt/bitnami/nginx/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.27.3-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: NGINX_HTTP_PORT_NUMBER
              value: "8080"
            - name: NGINX_HTTPS_PORT_NUMBER
              value: "8443"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: certificate
              mountPath: /certs
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: certificate
          secret:
            secretName: kargo-multi-nginx-tls
            items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
---
# Source: kargo-multi/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kargo-multi-redis-master
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
    app.kubernetes.io/component: master
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: kargo-multi
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: kargo-multi-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kargo-multi
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.4.1
        helm.sh/chart: redis-20.6.1
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: c716209c15e93ac955798b71ec7c22992bd5d76c1149e205799257af2a73e28f
        checksum/secret: 294e42924a1a8f8d74b561d0bb9ae7341c2ec7e8425957bbcbb1710326c71fb7
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: kargo-multi-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kargo-multi
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.4.1-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kargo-multi-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: kargo-multi-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: kargo-multi-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: kargo-multi-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: kargo-multi
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kargo-multi/charts/redis/templates/replicas/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kargo-multi-redis-replicas
  namespace: "kargo-demo"
  labels:
    app.kubernetes.io/instance: kargo-multi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.1
    helm.sh/chart: redis-20.6.1
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: kargo-multi
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: kargo-multi-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kargo-multi
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.4.1
        helm.sh/chart: redis-20.6.1
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: c716209c15e93ac955798b71ec7c22992bd5d76c1149e205799257af2a73e28f
        checksum/secret: b8a42ececea80ebc587fea19b27fe8bf95bcac5ecae6a6980b2331a1f460ad71
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: kargo-multi-redis-replica
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kargo-multi
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.4.1-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: kargo-multi-redis-master-0.kargo-multi-redis-headless.kargo-demo.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kargo-multi-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kargo-multi-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: kargo-multi-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: kargo-multi-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: kargo-multi-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: kargo-multi
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
